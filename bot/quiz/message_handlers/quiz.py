import asyncio

from aiogram import Router, F, html
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.formatting import (
    as_list,
    as_section,
    Bold,
    as_numbered_list,
    as_key_value,
)

from bot.quiz.constants import SHORT_FAQ
from bot.quiz.keyboards.location_inline_keyboard import location_inline_keyboard
from bot.quiz.keyboards.question_keyboard import question_keyboard
from bot.quiz.states.states import Quest
from bot.utils.generate_promocode import generate_promocode
from bot.utils.geopos import check_geopos
from bot.utils.get_questions import get_questions
from bot.utils.get_url import get_url

router = Router()


@router.message(Command("quest"))
async def start_quest(message: Message, state: FSMContext, step: int = 0):
    await state.set_state(Quest.location)
    await state.update_data(step=step)
    if step == 0:
        await state.update_data(questions=get_questions())
        await message.answer(text=SHORT_FAQ)
        await asyncio.sleep(10)

        await message.answer(
            text="–ö–≤–µ—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", reply_markup=ReplyKeyboardRemove()
        )
        await asyncio.sleep(1)

    data = await state.get_data()
    try:
        question = data["questions"][step]
    except IndexError:
        await message.answer(text="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞...")
        await exit_quest(message, state)
    else:
        if step == 0:
            await message.answer(
                text="–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!", reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!", reply_markup=ReplyKeyboardRemove()
            )

        await asyncio.sleep(1)
        await message.answer(
            text=f"–ë–µ–≥–∏ [–°–Æ–î–ê]({get_url(question.location[0], question.location[1])})",
            reply_markup=location_inline_keyboard(),
            parse_mode=ParseMode.MARKDOWN,
        )
        await asyncio.sleep(1)


@router.message(Quest.location, F.content_type == "location")
async def check_location(message: Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    data = await state.get_data()
    step = data["step"]
    question = data["questions"][step]
    r_lat = question.location[0]
    r_lon = question.location[1]

    dis = check_geopos((lat, lon), (r_lat, r_lon))

    if dis:
        await state.set_state(Quest.get_question)
        await send_question(message, state)
        await asyncio.sleep(1)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –∫ —Ç–æ—á–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å.\n"
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏ –±–ª–∏–∂–µ –∏ –Ω–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –∫–Ω–æ–ø–∫—É "üß≠–Ø –ù–ê –ú–ï–°–¢–ï"'
        )
        await asyncio.sleep(1)


@router.message(F.text == "üö´ –í—ã—Ö–æ–¥")
async def exit_quest(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    questions = data["questions"]

    correct = 0
    incorrect = 0
    user_answers = []
    for step, quiz in enumerate(questions):
        answer = answers.get(step)
        is_correct = answer == quiz.correct_answer
        if is_correct:
            correct += 1
            icon = "‚úÖ"
        else:
            incorrect += 1
            icon = "‚ùå"
        if answer is None:
            answer = "no answer"
        user_answers.append(f"{quiz.text} ({icon} {html.quote(answer)})")

    content = as_list(
        as_section(
            Bold("–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã"),
            as_numbered_list(*user_answers),
        ),
        "",
        as_section(
            Bold("–ò—Ç–æ–≥–æ"),
            as_list(
                as_key_value("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", correct),
                as_key_value("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", incorrect),
            ),
        ),
    )

    await message.answer(**content.as_kwargs(), reply_markup=ReplyKeyboardRemove())
    if correct > 0:
        promocode = generate_promocode(correct)

        await message.answer(
            text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {correct * 10}% —Å–∫–∏–¥–∫—É –≤ "–ü–∏—Ü—Ü–∞-–ø–æ—Ä—Ç–∞–ª–µ"! '
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promocode}. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞—à–µ–º—É –∫–∞—Å—Å–∏—Ä—É!"
        )
    else:
        await message.answer(
            text=f"–í —ç—Ç–æ—Ç —Ä–∞–∑ –í–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –í—ã —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ!"
        )

    await state.set_data({})
    await state.clear()


@router.message(Quest.get_question, F.text)
async def get_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    answers = data.get("answers", {})
    answers[step] = message.text
    await state.update_data(answers=answers)
    new_data = await state.get_data()

    await message.answer(text=f"–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")
    await asyncio.sleep(2)

    await start_quest(message, state, step=step + 1)


async def send_question(message: Message, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    question = data["questions"][step]

    await message.answer(
        text=question.text,
        reply_markup=question_keyboard(question=question, step=step),
    )
